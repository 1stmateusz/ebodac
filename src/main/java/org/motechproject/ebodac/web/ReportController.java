package org.motechproject.ebodac.web;

import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.motechproject.ebodac.constants.EbodacConstants;
import org.motechproject.ebodac.domain.Visit;
import org.motechproject.ebodac.service.LookupService;
import org.motechproject.ebodac.service.ReportService;
import org.motechproject.ebodac.web.domain.GridSettings;
import org.motechproject.ebodac.web.domain.Records;
import org.motechproject.mds.dto.LookupDto;
import org.motechproject.mds.query.QueryParams;
import org.motechproject.mds.util.Constants;
import org.motechproject.mds.util.Order;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Controller
public class ReportController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReportController.class);

    @Autowired
    private LookupService lookupService;

    @Autowired
    private ReportService reportService;

    @RequestMapping(value = "/generateReports", method = RequestMethod.POST)
    @PreAuthorize(Constants.Roles.HAS_DATA_ACCESS)
    @ResponseBody
    public ResponseEntity<String> generateReports(@RequestBody String startDate) {

        try {
            LocalDate date = LocalDate.parse(startDate, DateTimeFormat.forPattern(EbodacConstants.REPORT_DATE_FORMAT));
            reportService.generateDailyReportsFromDate(date);
            LOGGER.info("Reports generated by custom request from date: {}",
                    date.toString(DateTimeFormat.forPattern(EbodacConstants.REPORT_DATE_FORMAT)));
        } catch (IllegalArgumentException e) {
            LOGGER.error("Invalid date format", e);
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            LOGGER.error("Fatal error raised during creating reports", e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @RequestMapping(value = "/dailyClinicVisitScheduleReport", method = RequestMethod.POST)
    @PreAuthorize("hasAnyRole('mdsDataAccess', 'manageEbodac')")
    @ResponseBody
    public Records<?> getDailyClinicVisitScheduleReport(GridSettings settings) {
        Order order = null;
        if (!settings.getSortColumn().isEmpty()) {
            order = new Order(settings.getSortColumn(), settings.getSortDirection());
        }
        QueryParams queryParams = new QueryParams(settings.getPage(), settings.getRows(), order);
        try {
            return lookupService.getEntities(Visit.class, settings.getLookup(), settings.getFields(), queryParams);
        } catch (IOException e) {
            LOGGER.debug(e.getMessage(), e);
            return null;
        }
    }

    @RequestMapping(value = "/getLookupsForDailyClinicVisitScheduleReport", method = RequestMethod.GET)
    @PreAuthorize(Constants.Roles.HAS_DATA_OR_SCHEMA_ACCESS)
    @ResponseBody
    public List<LookupDto> getLookupsForDailyClinicVisitScheduleReport() {
        List<LookupDto> ret = new ArrayList<>();
        List<LookupDto> availableLookupas = lookupService.getAvailableLookups("Visit");
        for(LookupDto lookupDto : availableLookupas) {
            if(EbodacConstants.AVAILABLE_LOOKUPS_FOR_DAILY_CLINIC_VISIT_SCHEDULE_REPORT.contains(lookupDto.getLookupName())) {
                ret.add(lookupDto);
            }
        }
        return ret;
    }
}
